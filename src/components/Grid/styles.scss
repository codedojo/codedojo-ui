@use 'sass:list';
@use 'sass:map';
@use './variables';
@use './mixins';

:root {
    @each $size in map.keys(variables.$columns) {
        --ui-grid-margin-#{$size}: #{map.get(
            variables.$default-margin,
            $size
        )};
        --ui-grid-gutter-#{$size}: #{map.get(
            variables.$default-gutter,
            $size
        )};
        --ui-grid-column-width-#{$size}: #{map.get(
            variables.$column-width,
            $size
        )};
    }
}

// postcss-bem-linter: define layout-grid
.ui-Grid {
  @each $size in map.keys(variables.$columns) {
    @include mixins.media-query_($size) {
      $margin: map.get(variables.$default-margin, $size);

      @include mixins.layout-grid($size, $margin, variables.$max-width);
    }
  }

  &--align-left {
    margin-right: auto;
    margin-left: 0;
  }
  
  &--align-right {
    margin-right: 0;
    margin-left: auto;
  }
}

.ui-Grid__inner {
  @each $size in map.keys(variables.$columns) {
    @include mixins.media-query_($size) {
      $margin: map.get(variables.$default-margin, $size);
      $gutter: map.get(variables.$default-gutter, $size);

      @include mixins.inner($size, $margin, $gutter);
    }
  }
}

.ui-Grid__cell {
  // select the upper breakpoint
  $upper-breakpoint: list.nth(map.keys(variables.$columns), 1);

  @each $size in map.keys(variables.$columns) {
    @include mixins.media-query_($size) {
      $gutter: map.get(variables.$default-gutter, $size);

      @include mixins.cell($size, variables.$default-column-span, $gutter);

      @for $span from 1 through map.get(variables.$columns, $upper-breakpoint) {
        // Span classes.
        // stylelint-disable max-nesting-depth
        @at-root .ui-Grid__cell--span-#{$span},
          .ui-Grid__cell--span-#{$span}-#{$size} {
          @include mixins.cell-span_($size, $span, $gutter);
        }
        // stylelint-enable max-nesting-depth
      }
    }
  }

  // Order override classes.
  @for $i from 1 through map.get(variables.$columns, $upper-breakpoint) {
    &--order-#{$i} {
      @include mixins.cell-order($i);
    }
  }

  // Alignment classes.
  &--align-top {
    @include mixins.cell-align(top);
  }

  &--align-middle {
    @include mixins.cell-align(middle);
  }

  &--align-bottom {
    @include mixins.cell-align(bottom);
  }
}

.ui-Grid--fixed-column-width {
  @each $size in map.keys(variables.$columns) {
    @include mixins.media-query_($size) {
      $margin: map.get(variables.$default-margin, $size);
      $gutter: map.get(variables.$default-gutter, $size);
      $column-width: map.get(variables.$column-width, $size);

      @include mixins.fixed-column-width(
        $size,
        $margin,
        $gutter,
        $column-width
      );
    }
  }
}